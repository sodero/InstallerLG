(procedure f1 (+ 303)) (f1); "","303",""
(procedure f1 (+ 303)) (f2); "","Line 1: Undefined function 'f2' 0",""
(set f2 606) (procedure f1 (+ 303)) (f2); "","Line 1: Undefined function 'f2' 0",""
(set @strict 0 f2 606) (procedure f1 (+ 303)) (f2); "","606",""
(set @strict 0 f2 606) (procedure f1 (+ 303)) (procedure f2 (+ 808)) (f2); "","808",""
(procedure f1 a (if (< a 32) (f1 (+ a 1)) (+ 0))) (f1 1); "","0",""
(procedure f1 a (if (< a 33) (f1 (+ a 1)) (+ 0))) (f1 1); "","Line 1: Max recursion depth exceeded 'f1' 0",""
(set d "X") (procedure fnc a b ((debug a b d) (set c a) (set a b) (set b c) (fnc a b))) (fnc "a" "b"); "","Line 1: Max recursion depth exceeded 'fnc' a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X a b X b a X 0",""
(procedure fnc a b ((debug a b) (set c a) (set a b) (set b c) (fnc a b))) (fnc "a" "b"); "","Line 1: Max recursion depth exceeded 'fnc' a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a a b b a 0",""
(procedure fnc a b ((debug a b) (set a "b") (fnc a b))) (fnc "a" "b"); "","Line 1: Max recursion depth exceeded 'fnc' a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b 0",""
(procedure fnc a b ((debug a) (fnc a b))) (fnc "a" "b"); "","Line 1: Max recursion depth exceeded 'fnc' a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a 0",""
(procedure f1); "","f1",""
(procedure f1) (f1); "","",""
(procedure f1 a (+a)) (f1 5); "","5",""
(procedure f1+ a (+a)) (f1+ 5); "","5",""
(procedure f+1 a (+a)) (f+1 5); "","5",""
(procedure f+1 a+ (+a+)) (f+1 5); "","5",""
(procedure +f+1 a+ (+a+)) (f+1 5); "","Line 1: syntax error, unexpected '+', expecting SYM '+'",""
(procedure +f+1 a+ (+a+)) (+f+1 5); "","Line 1: syntax error, unexpected '+', expecting SYM '+'",""
(procedure f+1 a (+a)) (f+1 5); "","5",""
(procedure f+1 a (+a+)) (f+1 5); "","Line 1: Undefined variable 'a+' 0",""
(set a+ 5) (procedure f+1 a (+a+)) (f+1 5); "","5",""
(set @strict 0) (procedure f+1 a (+a+)) (f+1 5); "","0",""
(procedure f1) (+ (f1)); "","0",""
(procedure f1 a b (+ 5)) (f1); "","5",""
(procedure f1 a b (cat a b)) (f1 "alfa" "beta"); "","alfabeta",""
(procedure f1 a b (cat a b)) (f1 "alfa" "beta") (f1); "","alfabeta",""
(procedure f1 a b (cat a b)) (f1 "alfa" "beta") (f1 "gamma"); "","gammabeta",""
(procedure f1 a b (cat a b)) (f1 "alfa" "beta") (set b "theta") (f1 "gamma"); "","gammatheta",""
(set a "alfa" b "beta") (procedure f1 a b (cat a b)) (f1); "","",""
(procedure f1 a b (cat a b)) (set a "alfa" b "beta") (f1); "","alfabeta",""
(procedure f1 a b (debug (cat a b))) (f1 "alfa" "beta") (f1 "gamma"); "","alfabeta gammabeta 1",""
(procedure f1 a b c) (+ (f1 1 2 3)); "","0",""
(procedure f1 (+ 1 1) (+ 1 2)) (f1); "","3",""
(procedure f1 ((+ 1 1) (+ 1 2))) (f1); "","3",""
(procedure f1 (+ 1 2)); "","f1",""
(procedure f1 (+ 1 2)) (procedure f1 (+ 1 1)); "","f1",""
(procedure f1 (+ 1 2)) (procedure f2 (+ 1 1)); "","f2",""
(f1); "","Line 1: Undefined function 'f1' 0",""
(set @strict 0) (f1); "","",""
(procedure f1 (+ 1 (+ 1 1))) (f1); "","3",""
(procedure f1 (+ 1 1)) (procedure f2 (+ (f1) (f1))) (f2); "","4",""
(procedure f1 (+ 1 1)) (procedure f2 (+ (f1) (f1))) (F2); "","4",""
(procedure f1 (+ 1 1)) (procedure f2 (+ (F1) (F1))) (f2); "","4",""
(procedure F1 (+ 1 1)) (procedure f2 (+ (F1) (F1))) (f2); "","4",""
(procedure f1 (+ 1 1)) (procedure f2 (+ f1 f1)) (f2); "","Line 1: Undefined variable 'f1' Line 1: Undefined variable 'f1' 0",""
(procedure F1 (+ 1 1)) (procedure f2 (+ f1 f1)) (f2); "","Line 1: Undefined variable 'f1' Line 1: Undefined variable 'f1' 0",""
(procedure f1 (+ 1 1)) (procedure f2 (+ F1 f1)) (F2); "","Line 1: Undefined variable 'F1' Line 1: Undefined variable 'f1' 0",""
(set @strict 0) (procedure f1 (+ 1 1)) (procedure f2 (+ f1 f1)) (f2); "","0",""
(set @strict 0) (procedure f1 (+ 1 1)) (procedure f2 (+ f1 f1)) (F2); "","0",""
(procedure f1 (set a 1) (set b 2) (+ a (+ 1 b))) (f1); "","4",""
(procedure f1 a1 b1 (+ a1 b1)) (f1); "","0",""
(procedure f1 (+ a1 b1)) (f1); "","Line 1: Undefined variable 'a1' Line 1: Undefined variable 'b1' 0",""
(procedure f1 a1 b1 (+ a2 b2)) (f1); "","Line 1: Undefined variable 'a2' Line 1: Undefined variable 'b2' 0",""
(set @strict 0) (procedure f1 (+ a1 b1)) (f1); "","0",""
(set @strict 0) (procedure f1 a1 b1 (+ a2 b2)) (f1); "","0",""
(procedure f1 a b (+ a b)) (f1); "","0",""
(procedure f1 a b (+ a b)) (f1 2); "","2",""
(procedure f1 a b (+ a b)) (f1 1 2); "","3",""
(procedure f1 a b (+ a b)) (f1 1 2) (f1); "","3",""
(procedure f1 a b (+ a b)) (f1 1 2) (f1 2); "","4",""
(procedure f1 a b (+ a b)) (f1 1 2) (f1 (f1)); "","5",""
(procedure f1 a b (+ a b)) (procedure f2 (+ 1 1)) (f1 1 3) (f1 (f2)); "","5",""
(procedure f1 a b (+ a b)) (f1 1 2) (f1 1 2 3 4); "","3",""
(procedure f1 a b (+ a b)) (f1 1 2) (f1 1 2 3 (f1)); "","3",""
(procedure f1 a b (+ a b)) (f1 1 2) (f1 1) (f1 2 3 4); "","5",""
(procedure f1 (+ 1 2)) (set a (f1)) (procedure f1 (+ 2 2)) (set a (+ a (f1))) (+ a); "","7",""
(procedure f1 (+ 1 2)) (procedure f1 (+ 2 (f1))) (f1); "","Line 1: Max recursion depth exceeded 'f1' 0",""
(procedure P_ADDMUL arg1 arg2 arg3 (* (+ arg1 arg2) arg3)) (P_ADDMUL 1 2 3) (P_ADDMUL 4 5); "","27",""
(procedure p_ADDMUL arg1 arg2 arg3 (* (+ arg1 arg2) arg3)) (P_ADDMUL 1 2 3) (P_ADDMUL 4 5); "","27",""
(procedure fnc a ((debug a) (fnc "a"))) (fnc "b"); "","Line 1: Max recursion depth exceeded 'fnc' b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a 0",""
(procedure fnc a (if (<> a "a/a/a/a/a/a/a") ((set a (tackon a "a")) (fnc a)) (("%s" a)))) (fnc "a") ; "","a/a/a/a/a/a/a",""
(set a "pre") (procedure fnc a (if (<> a "a/a/a/a/a/a/a") ((set a (tackon a "a")) (fnc a)) (("%s" a)))) (fnc "b") ("%s" a); "","Line 1: Max recursion depth exceeded 'fnc' 0",""
(set a "pre") (procedure fnc a (if (<> a "b/a/a/a/a/a/a") ((set a (tackon a "a")) (fnc a)) (("%s" a)))) (fnc "b") ; "","b/a/a/a/a/a/a",""
(set a "pre") (procedure fnc a (if (<> a "a/a/a/a/a/a/a") ((set a (tackon a "a")) (fnc a)) (("%s" a)))) (fnc "a") ("%s" a); "","a/a/a/a/a/a/a",""
(set a "pre" b "glb") (procedure fnc a (if (<> a "a/a/a/a/a/a/a") ((set a (tackon a "a") b "yes") (fnc a)) (("%s" a)))) (fnc "a") ("%s%s" a b); "","a/a/a/a/a/a/ayes",""
(set a "pre") (procedure fnc a (if (<> a "a/a/a/a/a/a/a") ((set a (tackon a "a") b "yes") (fnc a)) (("%s" a)))) (fnc "a") ("%s%s" a b); "","a/a/a/a/a/a/ayes",""
